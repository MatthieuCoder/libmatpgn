%prefix "parser"

%value "void *"
%auxil "system_t *"

%header {
#include "libparse/system.h"
}

%source {
static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
// #define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
//     fprintf(stderr, "%*s%s %s @%zu\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length))

#define PCC_GETCHAR(auxil) system_read_char(auxil)
#define PCC_FREE(auxil, ptr) {}
#define PCC_MALLOC(auxil, size) system_alloc(auxil, size)
#define PCC_REALLOC(auxil, ptr, size) system_realloc(auxil, ptr, size)

#include "libgame/san.h"
#include "libmem/vector.h"
#include "libgame/round.h"
#include "libgame/game.h"
#include "libmem/kv.h"
}

# Maing PGN entry representation.
pgn <- header_part:header EOL rounds_part:rounds {
    game* n_game = game_new();
    n_game->header = (vector*)header_part;
    n_game->round =  (vector*)rounds_part;
    // printf("PGN entry parsing is finished. Got header_part=%x and rounds_part=%x into make_server=%x\n", header_part, rounds_part, n_game);
    
    $$ = n_game;
}

header_value <- [^"]* { $$ = $0; }
# Representation of a header entry key-pair
# This is parsed using a recursive technique where 
# the last line (empty line) creates the parent vector.
header <- '[' _ key_name:header_value _ '"' key_value:header_value '"' ']' EOL next_entry:header {
    // Adding every entry to a vector (resizable array) for now.
    kv* entry = vector_push(next_entry);
    entry->key = key_name;
    entry->value = key_value;
    $$ = next_entry;
} / {
    // Creates the root vector during the last line.
    // We specify the size of a kv since it is a known-size and moveable type.
    $$ = vector_new(sizeof(kv));
}

# Represents every end-game state given by the pgn specification.
game_end <- "1-0"     { $$ = (void*)GS_BLACK_WON; }
          / "0-1"     { $$ = (void*)GS_WHITE_WON; }
          / "1/2-1/2" { $$ = (void*)GS_DRAW;       }
          / "*"       { $$ = (void*)GS_UNKNOWN;   }

file <- 
        'a' { $$ = (void*)FILE_A; }
    /   'b' { $$ = (void*)FILE_B; }
    /   'c' { $$ = (void*)FILE_C; }
    /   'd' { $$ = (void*)FILE_D; }
    /   'e' { $$ = (void*)FILE_E; }
    /   'f' { $$ = (void*)FILE_F; }
    /   'g' { $$ = (void*)FILE_G; }
    /   'h' { $$ = (void*)FILE_H; }

rank <- 
      '1' { $$ = (void*)RANK_1; }
    / '2' { $$ = (void*)RANK_2; }
    / '3' { $$ = (void*)RANK_3; }
    / '4' { $$ = (void*)RANK_4; }
    / '5' { $$ = (void*)RANK_5; }
    / '6' { $$ = (void*)RANK_6; }
    / '7' { $$ = (void*)RANK_7; }
    / '8' { $$ = (void*)RANK_8; }

# N for Knight
# B for Bishop
# R for rook
# Q for queen
# K for king
san_piece <- 
      'N' { $$ = (void*)PIECE_KNIGHT; }
    / 'B' { $$ = (void*)PIECE_BISHOP; }
    / 'R' { $$ = (void*)PIECE_ROOK; }
    / 'Q' { $$ = (void*)PIECE_QUEEN; }
    / 'K' { $$ = (void*)PIECE_KING; }

promoted_to <- 
    'Q' { $$ =   (void*)PIECE_QUEEN; }
    / 'R' { $$ = (void*)PIECE_ROOK; }
    / 'B' { $$ = (void*)PIECE_BISHOP; }
    / 'N' { $$ = (void*)PIECE_KNIGHT; }

piece_moves <- 
       p:san_piece f:file r:rank {
            san_t* san = PCC_MALLOC(auxil, sizeof(san_t));
            san->type = (san_piece_t)p;
            san->inner.piece_move.destination.file = (file_t)f;
            san->inner.piece_move.destination.rank = (rank_t)r;
            san->inner.piece_move.captures = 0;
            $$ = san;
       }
    /  p:san_piece 'x' f:file r:rank {
            san_t* san = PCC_MALLOC(auxil, sizeof(san_t));
            san->type = (san_piece_t)p;
            san->inner.piece_move.destination.file = (file_t)f;
            san->inner.piece_move.destination.rank = (rank_t)r;
            san->inner.piece_move.captures = 1;
            $$ = san;
    }
    / p:san_piece f:file r:rank {
            san_t* san = PCC_MALLOC(auxil, sizeof(san_t));
            san->type = (san_piece_t)p;
            san->inner.piece_move.destination.file = (file_t)f;
            san->inner.piece_move.destination.rank = (rank_t)r;
            san->inner.piece_move.captures = 0;
            $$ = san;
    }
    / p:san_piece f:file 'x' df:file r:rank {
            san_t* san = PCC_MALLOC(auxil, sizeof(san_t));
            san->type = (san_piece_t)p;
            san->inner.piece_move.destination.file = (file_t)df;
            san->inner.piece_move.destination.rank = (rank_t)r;
            san->inner.piece_move.captures = 1;
            san->inner.piece_move.from_file = (file_t)f;
            $$ = san;
    }
    / p:san_piece f:file df:file r:rank {
            san_t* san = PCC_MALLOC(auxil, sizeof(san_t));
            san->type = (san_piece_t)p;
            san->inner.piece_move.destination.file = (file_t)df;
            san->inner.piece_move.destination.rank = (rank_t)r;
            san->inner.piece_move.captures = 0;
            san->inner.piece_move.from_file = (file_t)f;
            $$ = san;
    }

inner_pawn <- 
        f:file r:rank 'x' df:file dr:rank  {
            san_t* san = PCC_MALLOC(auxil, sizeof(san_t));
            san->type = PIECE_PAWN;
            san->inner.pawn_move.captures.file = (file_t)df;
            san->inner.pawn_move.captures.rank = (rank_t)dr;
            san->inner.pawn_move.destination.file = (file_t)f;
            san->inner.pawn_move.destination.rank = (rank_t)r;
            $$ = san;
        }
    /   f:file 'x' df:file dr:rank {
            san_t* san = PCC_MALLOC(auxil, sizeof(san_t));
            san->type = PIECE_PAWN;
            san->inner.pawn_move.captures.file = (file_t)df;
            san->inner.pawn_move.captures.rank = (rank_t)dr;
            san->inner.pawn_move.destination.file = (file_t)f;
            san->inner.pawn_move.destination.rank = RANK_NONE;
            $$ = san;
        }
    /   f:file r:rank {
            san_t* san = PCC_MALLOC(auxil, sizeof(san_t));
            san->type = PIECE_PAWN;
            san->inner.pawn_move.captures.file = FILE_NONE;
            san->inner.pawn_move.captures.rank = RANK_NONE;
            san->inner.pawn_move.destination.file = (file_t)f;
            san->inner.pawn_move.destination.rank = (rank_t)r;
            $$ = san;
        }

pawn <- 
    p:inner_pawn '=' to:promoted_to {
        ((san_t*)p)->inner.pawn_move.promoted = (san_piece_t)to;
        $$ = p;
    }
    / p:inner_pawn {
        ((san_t*)p)->inner.pawn_move.promoted = PIECE_UNKNOWN;
        $$ = p;
    }

castling <- 
    'O-O-O' {
        san_t* san = PCC_MALLOC(auxil, sizeof(san_t));
        san->type = PIECE_CASTLING;
        san->inner.castling_move.side = QUEENSIDE;
        $$ = san;
    }
    /'O-O' {
        san_t* san = PCC_MALLOC(auxil, sizeof(san_t));
        san->type = PIECE_CASTLING;
        san->inner.castling_move.side = KINGSIDE;
        $$ = san;
    }

int_move <- 
        p:pawn { $$ = p; }
        / p:piece_moves { $$ = p; }
        / p:castling { $$ = p; }

checkmate_mark <- '++' / '#'
move <- r:int_move checkmate_mark {
        $$ = r;
        ((san_t*)r)->checkmate = 1;
    }
    / r:int_move '+' {
        $$ = r;
        ((san_t*)r)->check = 1;
    }
    / r:int_move { $$ = r; }

comment_complete_move <- number '...'
comment_str <- [^}]* {  $$ = $0; }
comment <- '{' str:comment_str '}' (EOL / _) comment_complete_move? { $$ = str; }

move_comment <- 
    m:move EOL? _ c:comment {
        ((san_t*)m)->comment = c;
        $$ = m;
    }
    / m:move EOL? _? { $$ = m; }

san <- v:move_comment { $$ = v; }

# Represent a round recursively using the same technique as the header
rounds <- game_end {
    //printf("INIT ROUND STACK\n");
    $$ = vector_new(sizeof(round));
}
/ round_number:number '.' EOL? _? fm:san _ sm:san next_entry:rounds {
    round* new = vector_push(next_entry);
    new->number = (void*)round_number;
    new->first_move = fm;
    new->second_move = sm;
    $$ = next_entry;
}
 / round_number:number '.' EOL? _? fm:san next_entry:rounds {
    round* new = vector_push(next_entry);
    new->number = (void*)round_number;
    new->first_move = fm;
    $$ = next_entry;
}

_      <- [ \t]*
EOL    <- '\n'
/ '\r\n'
/ '\r'

number <- <[0-9]+> { $$ = atoi($1); }
%%
